#include <iostream>
#include <vector>
#include <queue>
#include <limits>
using namespace std;


int networkDelayTime(vector<vector<int>>& times, int n, int k) {
    vector<int> dist(n+1, numeric_limits<int>::max());
    dist[k] = 0;
    
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
    pq.push(make_pair(0, k));
    
    while (!pq.empty()) {
        int d = pq.top().first;
        int u = pq.top().second;
        pq.pop();
        if (d > dist[u]) continue; // Skip outdated entries
        for (auto& edge : times) {
            if (edge[0] == u) {
                int v = edge[1];
                int w = edge[2];
                if (dist[u] + w < dist[v]) {
                    dist[v] = dist[u] + w;
                    pq.push(make_pair(dist[v], v));
                }
            }
        }
    }
    
    int max_dist = 0;
    for (int i = 1; i <= n; i++) {
        if (dist[i] == numeric_limits<int>::max()) {
            return -1;
        }
        max_dist = max(max_dist, dist[i]);
    }
    
        return max_dist;
}

int main() {
    vector<vector<int>> times = {{2,1,1},{2,3,1},{3,4,1}};
    int n = 4;
    int k = 2;
    int ans = networkDelayTime(times, n, k);
    cout << ans << endl; // Output: 2
    return 0;
}